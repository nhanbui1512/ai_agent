# -*- coding: utf-8 -*-
"""AI-Search-Agents.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i6FrgSXsWXLTEq00x4KtemQXFQtNiyFX

<img src="https://storage.googleapis.com/mle-courses-prod/users/61b6fa1ba83a7e37c8309756/private-files/5ca3e740-cf30-11ef-a16d-9b898737f71b-Screen_Shot_2025_01_10_at_15.53.26.png" width=700 />
"""



"""Tác giả: [ProtonX Team](https://protonx.coursemind.io/courses/677e0eeb02a8c600bdeb64e5/info)

Yêu cầu:
- [OpenAI key](https://platform.openai.com/settings/organization/api-keys) để làm backend LLMs
- [Serp API](https://serper.dev/api-key) key để tìm trên Google
"""

from openai import OpenAI


OPENAI_API_KEY="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"
SERCH_API_KEY="352f41955cba7c5ddbcf2371d0c8b0ac2f54e7cade2bb442d1031140a086c178"
def reasoning_step(state, user_input, intermediate_results):
    client = OpenAI(api_key=OPENAI_API_KEY)

    # Construct the assistant message dynamically with the state, user input, and intermediate results
    messages = [
        {
            "role": "user",
            "content": (
                "You are a reasoning and acting agent. Based on the current state and user input, decide the next action.\n"
                f"State: {state}\n"
                f"User Input: {user_input}\n"
                f"Intermediate Results: {intermediate_results}\n\n"
                "Respond with one of these actions:\n"
                "- Search(query)\n"
                "- Do nothing\n"
                "- Summarize(results)\n"
            )
        }
    ]

    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages,
        response_format={
            "type": "json_schema",
            "json_schema": {
                "name": "agent_schema",
                "schema": {
                    "type": "object",
                    "required": [],
                    "properties": {}
                },
                "strict": False
            }
        },
        tools=[
            {
                "type": "function",
                "function": {
                    "name": "search_action",
                    "strict": True,
                    "parameters": {
                        "type": "object",
                        "required": ["query"],
                        "properties": {
                            "query": {
                                "type": "string",
                                "description": "The search query string to be submitted to the search engine."
                            }
                        },
                        "additionalProperties": False
                    },
                    "description": "Performs a search using the SERP API and returns the organic results."
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "do_nothing",
                    "strict": True,
                    "parameters": {
                        "type": "object",
                        "required": [],
                        "properties": {},
                        "additionalProperties": False
                    },
                    "description": "A function that performs no action."
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "summarize_action",
                    "description": "Summarizes product results using OpenAI's GPT-4 model",
                    "parameters": {
                    "type": "object",
                    "required": [
                        "results"
                    ],
                    "properties": {
                        "results": {
                        "type": "string",
                        "description": "The product results to summarize"
                        }
                    },
                    "additionalProperties": False
                    },
                    "strict": True
                }
            }
        ],
        tool_choice="required",
        temperature=1,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0
    )

    return response

assistant_message = reasoning_step(
    "start",
    "iphone 14 price?",
    []
).choices[0].message

assistant_message

def process_tool_calls(response):
    # Extract tool call information from the response
    tool_calls = response.tool_calls

    if tool_calls:
        # Extract tool function details
        tool_call_id = tool_calls[0].id
        tool_function_name = tool_calls[0].function.name
        tool_query_string = eval(tool_calls[0].function.arguments)

        # Print extracted details
        print('Tool Function Name:', tool_function_name)
        print('Tool Query String:', tool_query_string)

        return tool_function_name, tool_query_string

    else:
        print("No tool calls identified.")
        return None, None

process_tool_calls(assistant_message)

def search_action(query):
    from serpapi import GoogleSearch
    api_key = SERCH_API_KEY
    search = GoogleSearch({"q": query, "api_key": api_key})
    results = search.get_dict()
    print(results)
    return results['organic_results']

def do_nothing():
    return None

def summarize_action(results):
    client = OpenAI(api_key=OPENAI_API_KEY)
    prompt = f"Summarize the following product results:\n{results}"

    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "user", "content": prompt},
        ]
    )
    return response.choices[0].message.content

function_mapping = {
    "search_action": search_action,
    "do_nothing": do_nothing,
    "summarize_action": summarize_action
}



def react_agent(user_input):
    state = {"status": "start", "history": []}  # Initialize the state with status and history
    intermediate_results = []

    while True:
        # Reasoning step: Decide the next action
        action_response = reasoning_step(state, user_input, intermediate_results).choices[0].message

        print("===user_input", user_input)

        action_response = process_tool_calls(action_response)
        tool_function_name, tool_query_string = action_response

        if tool_function_name == "do_nothing":
            return intermediate_results[-1]["result"]
            break

        # Execute the selected action
        function_to_call = function_mapping[tool_function_name]
        action_result = function_to_call(**tool_query_string)

        print(action_result)

        # Save intermediate results
        intermediate_results.append({
            "action": tool_function_name,
            "parameters": tool_query_string,
            "result": action_result
        })

        # Update state
        state.update({
            "status": "in_progress",
            "last_action": tool_function_name,
            "last_parameters": tool_query_string
            })

    return intermediate_results

user_query = "Thời tiết hôm nay có phù hợp để đi bơi ở Hồ Gươm không?"
final_answer = react_agent(user_query)
print(f"Final Output: {final_answer}")

final_answer